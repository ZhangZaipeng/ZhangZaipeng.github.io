https://blog.csdn.net/yangguosb/article/details/108214415

MySQL架构
  单库单表
    最简单的订单管理方案，适用于创业初期，便于商业模型的快速落地验证；
  读写分离
    解决问题： 单库性能达到极限，成为系统性能瓶颈点；
    核心思想：增加从库，单点写入，多点读取（提升读性能）。
  垂直拆分
    随着业务发展，订单表字段越来越多，职责不清晰，维护麻烦。将相同功能的字段为一组进行拆分，职责清晰，容易维护和扩展。
  数据归档/冷热分离
    解决问题： 单库数据量过多导致读写性能下降（RT变高）；
    核心思想：利用订单“长尾效应”的特点，将历史数据迁移到其它库（冷库），为热库瘦身，从而提升性能
  分库分表
    解决问题： 支持更高的并发量和数据量，解决单库性能和数据量的瓶颈；
    核心思想： 数据分片，关键是分片key和分片算法。
    分库数量 = 峰值并发量 / 单库的IOPS
    分表数量 = 数据量 / 单表容量 （阿里Java开发规范的建议值：单表行数超过 500 万行或者单表容量超过 2GB）

MySQL + NoSQL架构
  MySQL + ES
    解决问题： 分库分表的查询能力有限，无法支持复杂灵活的查询；
    核心思想： 引入ES，建立热点查询到订单ID的映射关系，用于支持复杂的查询条件。
              复杂查询通过ES获取对应的订单ID，再从数据库从库查询获得订单
  MySQL + ES + HBase
    解决问题： 解决订单详情查询时间长问题（需要去订单表及其关联表多次查询）;
    核心思想： 引入HBase，将订单及其关联表全量字段导入HBase，RowKey为订单id


技术相关组件：canal mycat kafka hbase es mysql
