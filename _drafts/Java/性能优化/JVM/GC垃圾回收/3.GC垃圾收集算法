一、标记-清除(Mark and Sweep)
  算法思想：
    1).标记阶段：首先标记出所有需要回收的对象。
    2).清除阶段：标记完成后，统一回收被标记的对象
  优点：

  缺点：
    1).效率问题：标记清除过程效率都不高。
    2).空间问题：标记清除之后会产生大量的不连续的内存碎片

二、标记-清除-整理算法(Mark-Sweep-Compact)
  算法思想：
    1).将现有的内存空间分为两块，每次只使用一块.
    2).当其中一块用完的时候，就将还存活的对象复制到另外一块上去。
    3).再把已使用过的内存空间一次清理掉。

  优点：
    1).由于是每次都对整个半区进行内存回收，内存分配时不必考虑内存碎片问题。
    2).只要移动堆顶指针，按顺序分配内存即可，实现简单，运行高效

  缺点：
    1).内存减少为原来的一半，太浪费了。
    2).对象存活率较高的时候就要执行较多的复制操作，效率变低。
    3).如果不使用50%的对分策略，老年代需要考虑的空间担保策略。

三、标记-复制算法(Mark and Copy)
  算法思想：
    1).标记阶段：首先标记出所有需要回收的对象。
    2).让存活的对象向内存的一段移动。而不跟“标记-清除”直接对可回收对象进行清理
    3).再清理掉边界以外的内存
  优点：
  缺点：

四、分代收集算法
  以上三种算法的综合
  在新生代中，每次垃圾收集时都发现有大批对象死去，只有少量存活，选用：复制算法
  在老年代中因为对象存活率高、没有额外空间对它进行分配担保，就必须使用“标记-清除”或者“标记-整理”算法来进行回收。
