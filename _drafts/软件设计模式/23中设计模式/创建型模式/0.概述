1.概述
  创建型模式的主要关注点是“怎样创建对象？”，它的主要特点是“将对象的创建与使用分离”。
  这样可以降低系统的耦合度，使用者不需要关注对象的创建细节，对象的创建由相关的工厂来完成。
  就像我们去商场购买商品时，不需要知道商品是怎么生产出来一样，因为它们由专门的厂商生产。

2.创建型模式分为以下几种。
  单例（Singleton）模式：某个类只能生成一个实例，该类提供了一个全局访问点供外部获取该实例，其拓展是有限多例模式。
  原型（Prototype）模式：将一个对象作为原型，通过对其进行复制而克隆出多个和原型类似的新实例。
  工厂方法（FactoryMethod）模式：定义一个用于创建产品的接口，由子类决定生产什么产品。
  抽象工厂（AbstractFactory）模式：提供一个创建产品族的接口，其每个子类可以生产一系列相关的产品。
  建造者（Builder）模式：将一个复杂对象分解成多个相对简单的部分，然后根据不同需要分别创建它们，最后构建成该复杂对象。


3.单例模式
  1.定义：指一个类只有一个实例，且该类能自行创建这个实例的一种模式。
  2.作用与特点
    1.单例类只有一个实例对象；
    2.该单例对象必须由单例类自行创建；
    3.单例类对外提供一个访问该单例的全局访问点；
  3.实现形式：懒汉式单例、饿汉式单例
    见代码

4.原型
  1.定义：用一个已经创建的实例作为原型，通过复制该原型对象来创建一个和原型相同或相似的新对象。
  2.模式的结构
    原型模式包含以下主要角色。
      抽象原型类：规定了具体原型对象必须实现的接口。
      具体原型类：实现抽象原型类的 clone() 方法，它是可被复制的对象。
      访问类：使用具体原型类中的 clone() 方法来复制新的对象。
  3.实现
    见代码

5.工厂方法
  1.定义
    定义一个创建产品对象的工厂接口，将产品对象的实际创建工作推迟到具体子工厂类当中。
    这满足创建型模式中所要求的“创建与使用相分离”的特点。
  2.模式的结构：
    1.抽象工厂（Abstract Factory）：提供了创建产品的接口，调用者通过它访问具体工厂的工厂方法 newProduct() 来创建产品。
    2.具体工厂（ConcreteFactory）：主要是实现抽象工厂中的抽象方法，完成具体产品的创建。
    3.抽象产品（Product）：定义了产品的规范，描述了产品的主要特性和功能。
    4.具体产品（ConcreteProduct）：实现了抽象产品角色所定义的接口，由具体工厂来创建，它同具体工厂之间一一对应。
  3.实现
    见代码

6.抽象工厂
  1.定义
    是一种为访问类提供一个创建一组相关或相互依赖对象的接口，
    且访问类无须指定所要产品的具体类就能得到同族的不同等级的产品的模式结构。
  2.模式的结构
    抽象工厂模式的主要角色如下。
      抽象工厂（Abstract Factory）：提供了创建产品的接口，它包含多个创建产品的方法 newProduct()，可以创建多个不同等级的产品。
      具体工厂（Concrete Factory）：主要是实现抽象工厂中的多个抽象方法，完成具体产品的创建。
      抽象产品（Product）：定义了产品的规范，描述了产品的主要特性和功能，抽象工厂模式有多个抽象产品。
      具体产品（ConcreteProduct）：实现了抽象产品角色所定义的接口，由具体工厂来创建，它 同具体工厂之间是多对一的关系。
  3.实现
    见代码

7.建造者
  1.定义
    指将一个复杂对象的构造与它的表示分离，使同样的构建过程可以创建不同的表示，这样的设计模式被称为建造者模式。
    它是将一个复杂的对象分解为多个简单的对象，然后一步一步构建而成。它将变与不变相分离，即产品的组成部分是不变的，但每一部分是可以灵活选择的。
  2. 模式的结构
    1.建造者（Builder）模式的主要角色如下。
    2.产品角色（Product）：它是包含多个组成部件的复杂对象，由具体建造者来创建其各个滅部件。
    3.抽象建造者（Builder）：它是一个包含创建产品各个子部件的抽象方法的接口，通常还包含一个返回复杂产品的方法 getResult()。
    4.具体建造者(Concrete Builder）：实现 Builder 接口，完成复杂产品的各个部件的具体创建方法。
    5.指挥者（Director）：它调用建造者对象中的部件构造与装配方法完成复杂对象的创建，在指挥者中不涉及具体产品的信息。
  3.实现
    见代码
