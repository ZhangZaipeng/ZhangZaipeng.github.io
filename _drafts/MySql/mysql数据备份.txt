一、备份的种类
	1.物理和逻辑角度：物理备份 和 逻辑备份
		物理备份，对数据库操作系统的物理文件的备份
		逻辑备份，对数据库逻辑组件的备份
	2.从备份策略角度：完全备份、差异备份、增量备份
		完全备份：每次对数据进行完整备份
		差异备份：备份那些自从上次完全备份之后被修改过的文件
		增量备份：只有那些在上次完成备份或者增量备份后被修改的文件才会备份
二、全量备份方式
	1.直接备份
		停掉mysql服务
		用安装 xz 包  用tar Jcvf /opt/mysql-$(date + %F ).tar.xz

	2.使用专用备份工具 mysqldump
		单个库进行完全备份
		mysqldump -u root 用户名 -p [密码] [选项] [数据库名] > /备份路径/备份文件名
		例子：mysqldump -uroot -p jm_test > /opt/back/jm_test_db.sql

		数据库中的某一个表
		mysqldump -u root 用户名 -p [密码] [选项] 数据库名 表名 > /备份路径/备份文件名(备份到安全的位置)
		例子：mysqldump -uroot -p jm_test  test > /opt/back/jm_test_db.sql

		多个数据库
		mysqldump -u 用户名 -p [密码] [选项] --databases [数据库1] [数据库2] > /opt/back/many_db.sql

		所有的数据库
		例子：mysqldump -uroot -p --all-databases > /opt/back/all-$(date +%F)_db.sql
三、全量备份恢复操作
	1.source命令（替代 “.”）
		登陆MYSQL数据库
		执行 source 备份sql脚本的路径
	2.mysql命令
		mysql -u 用户名 -p [密码]  < 库备份脚本的路径
	3.恢复表
		mysql -u 用户名 -p [密码]  库名 < 表备份脚本的路径
四、增量备份
	特点：1.备份量不是很大，时间短
	          2.恢复麻烦：需要上次完全备份以及以后完全备份之后的所有增量备份
	原理：通过mysql提供的二进制日志间接增量备份
	二进制日志对备份的意义：1.二进制保存了所有更新或者可能更新的数据库操作
			         2.启动Mysql服务开始记录，在文件达到max_binglog_size
				设置大小或收到flush logs，重新建立日志文件
			         3.只需要定时执行flush logs方法重新创建的日志生成二进制文件序列，
				并及时把这些日志保存到安全的地方
	增量备份操作：
		1.增量备份【前提】开启二进制日志功能 -->在[mysqld]选项中加入log-bin=mysql-bin
		2. mysqladmin -uroot -p  flush-logs  --> 得到新的
二进制日志文件
		3.mysqlbinlog --no-defaults [文件名称] --->查看二进制文件
   		4.--no-defaluts 解决 unkown variable 'default-character-set=utf8'
		5.复制二进制文件进行增量备份
		    cp 二进制文件  安全的备份位子   ---> cp   mysql-bin.0003   /opt/back/
五、增量备份恢复
	1.使用mysqladmin -uroot -p flush-logs 生成二进制日志，避免将所有操作都纪录
	2.用二进制增量文件逐个倒推恢复
		mysqlbinlog 二进制增量文件  | mysql -uroot -p123456
	3.其他增量文件以此类推

	4.基于时间点的恢复
		mysqlbinlog --stop-datetime='2016-12-12 9:5:45' 二进制文件位子 | mysql -uroot -p123456
		日志文件开始 ~ 结束的时间（不包括结束点）
		mysqlbinlog --start-datetime='时间点' 二进制文件位子 | mysql -uroot -p123456
		日志开始时间（包括开始时间）~ 文件结束
	5.基于位置的恢复
		mysqlbinlog --stop-position='日志点' 二进制文件位子 | mysql -uroot -p123456
		日志文件开始 ~ 结束点
		mysqlbinlog --start-position='日志点' 二进制文件位子 | mysql -uroot -p123456
		开始点 ~ 日志文件结束
mysql字符集查看
	show variables like '%char%' ;