一、多线程的创建，启动，退出
    extends Thread
    implements Runnable

    启动 start()

二、线程的状态
    新创建   线程被创建，但是没有调用start方法
    可运行（RUNNABLE）  运行状态，由cpu决定是不是正在运行
    被阻塞（BLOCKING）  阻塞，线程被阻塞于锁
    等待/计时等待（WAITING） 等待某些条件成熟
    被终止  线程执行完毕

三、取消和中断线程

    1.手动设置取消标志位（不安全）
        为什么手动不安全，需要中断机制，线程处于阻塞（如调用了java的sleep,wait等等方法时）的时候，
        是不会理会我们自己设置的取消标志位的，但是这些阻塞方法都会检查线程的中断标志位
    2. Thread.currentThread().interrupt() 中断线程，本质是将线程的中断标志位设为true
    3. Thread.currentThread().isInterrupted() 线程检查中断标志位
    4. Thread.interrupted() 将中断标志位复位为false

    5.IO,NIO不可中断，解决方案：覆盖线程的interrupt方法，关闭底层socket,再用super.interrupt()

四、常用方法 ：run() start() yield() wait() notify() notifyAll() join()

    run()和start()
        run就是一个普通的方法，跟其他类的实例方法没有任何区别。
    sleep()
        不会释放锁，该方法属于Thread类，强制使当前线程休眠
    yield()
        当前线程出让cpu占有权，当前线程变成了可运行状态，下一时刻仍然可能被cpu选中，不会释放锁。
    join()
        把某个线程加入到，执行join方法的线程中
        eg: 把线程A加入B线程，则需要在 B中执行了A.join(), 线程B等待线程A 终止了以后，B线程才能执行 A.join()后面的内容

    wait() notify() notifyAll()
        方法的作用：
            notify() 唤醒在此对象监视器上等待的单个线程
            notifyAll() 唤醒在此对象监视器上等待的所有线程
            wait() 释放锁，导致当前的线程等待
        注意事项：
            1.wait、notify、notifyAll 的 锁范围是实例
            2.调用以上方法以前，当前线程必须要持有锁，如果不加锁的话，则会报 IllegalMonitorStateException 异常，
            3.调用之后wait()立刻释放锁，notify()/notifyAll()是等同步块执行完后才释放锁
        总结：
            wait和notify方法均可释放对象的锁，但wait同时释放CPU控制权，即它后面的代码停止执行，线程进入阻塞状态，
            而notify方法不立刻释放CPU控制权，而是在相应的synchronized(){}语句块执行结束，再自动释放锁。
        学习微博
        http://blog.csdn.net/lingzhm/article/details/44940823

五、volatile和synchronized
    violate 修饰字段，对这个变量的访问必须要从共享内存刷新一次。
        最新的修改写回共享内存。可以保证字段的可见性。绝对不是线程安全的，没有操作的原子性。

    synchronized 可以修饰方法或者以同步块的形式来进行使用，它主要确保多个线程在同一个时刻，
        只能有一个线程处于方法或者同步块中，它保证了线程对变量访问的可见性和排他性，又称为内置锁机制，悲观锁。

六、Sync同步的范围
    1.实例
        实例方法
        - public synchronized void f(){} --> 锁的是 调用这个方法的对象，（作用对象）
        实例方法中的代码块
        - synchronized(this){/*区块*/}  --> 锁的是 调用这个方法的对象，（作用对象）
        锁 lock 方法中的代码块
        - private Object lock = new Object();
          synchronized(lock) {} --> 锁的是 这个对象中的 lock实例变量，（作用范围对象）
    2.类
        锁静态方法
        - public static synchronized void f(){} --> 锁的是 这个类中的类方法 ，（作用范围类）
        锁类中的 代码块
        - synchronized(Foo.class) {} --> 锁的是 这个类， （作用范围类）
        锁 lock
        - private static Object lock = new Object();
          synchronized(lock) {} --> 锁的是 这个类中的 lock类变量，（作用范围类）
    学习微博
    http://www.cnblogs.com/devinzhang/archive/2011/12/14/2287675.html

七、等待通知机制
    等待方原则：
    1、获取对象锁
    2、如果条件不满足，调用对象的wait方法，被通知后依然要检查条件是否满足
    3、条件满足以后，才能执行相关的业务逻辑
    Synchronized(对象){
    	While(条件不满足){
    	    对象.wait()
        }
        业务逻辑处理
    }

    通知方原则：
    1、	获得对象的锁；
    2、	改变条件；
    3、	通知所有等待在对象的线程
    Synchronized(对象){
    	业务逻辑处理，改变条件
    	对象.notify/notifyAll
    }

八、等待超时模式