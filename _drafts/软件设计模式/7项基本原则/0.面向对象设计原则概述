七条基本原则

1.开闭原则: 软件实体应当对扩展开放，对修改关闭
2.里氏替换原则: 继承必须确保超类所拥有的性质在子类中仍然成立。也就是什么时候应该使用继承，什么时候不应该使用继承
3.依赖倒置原则: 高层模块不应该依赖低层模块，两者都应该依赖其抽象；抽象不应该依赖细节，细节应该依赖抽象。要面向接口编程，不要面向实现编程。
4.单一职责原则: 单一职责原则规定一个类应该有且仅有一个引起它变化的原因，否则类应该被拆分
5.接口隔离原则: 要为各个类建立它们需要的专用接口，而不要试图去建立一个很庞大的接口供所有依赖它的类去调用。
6.迪米特法则: 如果两个软件实体无须直接通信，那么就不应当发生直接的相互调用，可以通过第三方转发该调用。其目的是降低类之间的耦合度，提高模块的相对独立性。
7.合成复用原则: 软件复用时，要尽量先使用组合或者聚合等关联关系来实现，其次才考虑使用继承关系来实现。

总结: 开闭原则是总纲，它告诉我们要对扩展开放，对修改关闭；里氏替换原则告诉我们不要破坏继承体系；依赖倒置原则告诉我们要面向接口编程；
  单一职责原则告诉我们实现类要职责单一；接口隔离原则告诉我们在设计接口的时候要精简单一；迪米特法则告诉我们要降低耦合度；合成复用原则告诉我们要优先使用组合或者聚合关系复用，少用继承关系复用。
