一、Maven项目的目录结构
    hello-project
        |--src
        |-- --main
        |-- -- --java
        |-- -- --resources
        |-- --test
        |-- -- --java
        |-- -- --resources
        |--target
        |--pom.xml

二、坐标与依赖
    1.什么maven是坐标：maven的坐标是通过groupId、artifactId、version、packaging、classifier。

    2.依赖配置：根元素<project>下的<dependencies>可以包含一个或多个<dependencie>，声明一个和多个依赖。
        每个依赖可以包含的元素有：
        groupId、artifactId、version --> 基础坐标
        type --> 依赖的类型
        scope --> 依赖的范围
            compile
            test
            provided
            runtime
            system
            import
        optional --> 标记依赖是否可选
        exclusions --> 排除传递性依赖

三、快照版本的意义
    背景：小张开发的A模块，未发布正式版本，与模块A一起开发的模块B由小李开发，B的功能依赖A。
        在开发过程中A模块需要频繁的构建交给模块B。
    方案一：小李自己构建A，放到B中。操作多，报错一头一脸懵。
    方案二：小张重复部署保证仓库中的构建最新，但是小季如果不清理本地仓库，就得不到最新版的A，需要手动干预。
    方案三：小张不停的升级模块A的版本。这样两人都需要不停的更改pom文件，滥用版本号

    解决方案：小张只需要设置SNAPSHOT,然后发布到仓库中，maven会自动给模块A加上时间戳（标记最新版）。
        模块B在构建时因为用的是SNAPSHOT，maven会自动找到最新版本放到模块B中。

四、maven聚合与继承的意义和关系
    聚合的意义：创建一个聚合模块(有自己的pom,packaging为pom)，满足一条命令构建多个模块.
    继承的意义：当两个pom 文件有很多配置相同时，可以使用pom继承
        可继承的pom
           groupId，version，dependencies，dependencyManagement ...

五、传递依赖性原则
    1.路径最近优先 C->B->A, C依赖B，B依赖A，会先用B的jar
    2.路径相同，第一声明者优先：C->B,C->A,必须看B,A在C中哪一个先声明

<project xmlns="http://maven.apache.org/POM/4.0.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>me.gacl.maven</groupId>
    <artifactId>Hello</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <packaging></packaging>
    <name>Hello</name>

    <!-- 聚合标签 -->
    <modules>
        <module>...</module>
        <module>...</module>
        <module>...</module>
    </modules>

    <!--添加依赖的jar包-->
    <dependencies>
        <!--项目要使用到junit的jar包，所以在这里添加junit的jar包的依赖-->
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.9</version>
            <scope>test</scope>
            <!-- 排除传递性依赖 -->
            <exclusions>
                <exclusion>
                    ...
                </exclusion>
            </exclusions>
        </dependency>
    </dependencies>

    <!-- 既能够让子模块继承到父模块的依赖配置，又能保证子模块依赖使用的灵活性 -->
    <dependencyManagement></dependencyManagement>

    <!-- pluginManagement 插件管理 -->
    <build>
        <pluginManagement>
            <plugins>
                <plugin>
                    ...
                </plugin>
            </plugins>
        </pluginManagement>
    </build>

    <!-- 给出Maven部署当前项目的构件到远程库时
        注意：构建远程仓库需要认证  在settings 文件的 servers配置认证，id仓库名保持一致。
    -->
    <distributionManagement>
        <!-- 远程仓库配置 -->
        <repository>
            <!-- 仓库名 -->
            <id>releases</id>
            <name>Internal releases</name>
            <url>http://123.206.174.58:8081/nexus/content/repositories/releases/</url>
        </repository>
        <snapshotRepository>
            <id>snapshot</id>
            <name>Internal snapshot</name>
            <url>http://123.206.174.58:8081/nexus/content/repositories/snapshots/</url>
            <uniqueVersion>true</uniqueVersion>
        </snapshotRepository>
    </distributionManagement>
</project>

============================================================================================================================

<settings xmlns="http://maven.apache.org/SETTINGS/1.0.0"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd">

  <!-- 本地仓库存储位子 -->
  <localRepository>/path/to/local/repo</localRepository>

  <!-- interactiveMode
   | This will determine whether maven prompts you when it needs input. If set to false,
   | maven will use a sensible default value, perhaps based on some other setting, for
   | the parameter in question.
   |
   | Default: true
  <interactiveMode>true</interactiveMode>
  -->

  <!-- offline
   | Determines whether maven should attempt to connect to the network when executing a build.
   | This will have an effect on artifact downloads, artifact deployment, and others.
   |
   | Default: false
  <offline>false</offline>
  -->

  <!-- pluginGroups
   | This is a list of additional group identifiers that will be searched when resolving plugins by their prefix, i.e.
   | when invoking a command line like "mvn prefix:goal". Maven will automatically add the group identifiers
   | "org.apache.maven.plugins" and "org.codehaus.mojo" if these are not already contained in the list.
   |-->
  <pluginGroups>
    <!-- pluginGroup
     | Specifies a further group identifier to use for plugin lookup.
    <pluginGroup>com.your.plugins</pluginGroup>
    -->
  </pluginGroups>

  <!-- proxies
   | This is a list of proxies which can be used on this machine to connect to the network.
   | Unless otherwise specified (by system property or command-line switch), the first proxy
   | specification in this list marked as active will be used.
   |-->
  <proxies>
    <!-- proxy
     | Specification for one proxy, to be used in connecting to the network.
     |
    <proxy>
      <id>optional</id>
      <active>true</active>
      <protocol>http</protocol>
      <username>proxyuser</username>
      <password>proxypass</password>
      <host>proxy.host.net</host>
      <port>80</port>
      <nonProxyHosts>local.net|some.host.com</nonProxyHosts>
    </proxy>
    -->
  </proxies>

  <!-- 远程仓库认证
    不论是从远程仓库下载，还是部署构建都需要认证
  -->
  <servers>
    <server>
      <!-- 仓库ID -->
      <id>deploymentRepo</id>
      <username>repouser</username>
      <password>repopwd</password>
    </server>
  </servers>

  <!-- mirrors
   | maven 镜像 ：可以替代中央仓库，任何对中央仓库的请求都会转至镜像
   | <mirrorOf>*</mirrorOf> 表示任何远程仓库
   | <mirrorOf>repo1,repo2</mirrorOf>
   | <mirrorOf>*,!repo1</mirrorOf> ! 用于排除远程仓库
   -->
  <mirror>
      <id>nexus-aliyun</id>
      <mirrorOf>*</mirrorOf>
      <name>Nexus aliyun</name>
      <url>http://maven.aliyun.com/nexus/content/groups/public</url>
  </mirror>
  </mirrors>

  <profiles>

    <profile>
      <id>dev</id>
      <!-- 配置远程仓库 -->
      <repositories>

        <repository>
          <!-- 仓库id -->
          <id>central</id>
          <!-- 仓库地址 -->
          <url>http://123.206.174.58:8081/nexus/content/groups/public</url>
          <!--
            控制对仓库构建的下载 releases：发布版，snapshots：快照版
            enabled ： 是否允许下载  true 是
            updatePolicy ： 从远程仓库检验更新的频率（daily每天一次,never从不，always,interval）
            checksumPolicy ：构建校验
          -->
          <releases>
            <enabled>true</enabled>
            <updatePolicy>daily</updatePolicy>
            <checksumPolicy>ignore</checksumPolicy>
          </releases>
          <snapshots>
            <enabled>true</enabled>
            <updatePolicy>daily</updatePolicy>
            <checksumPolicy>ignore</checksumPolicy>
          </snapshots>
        </repository>
      </repositories>
    </profile>
  </profiles>

  <!-- activeProfiles
   | List of profiles that are active for all builds.
   |-->
  <activeProfiles>
    <activeProfile>alwaysActiveProfile</activeProfile>
    <activeProfile>anotherAlwaysActiveProfile</activeProfile>
  </activeProfiles>

</settings>

easy shell 插件

process on